<project name="LuceneInAction"  xmlns:artifact ="urn:maven-artifact-ant">
  <property name="build.lib.dir" location="./lib" />
  <target name="init_maven">
    <path id="maven-ant-tasks.classpath" path="${ANT_HOME}/lib/maven-ant-tasks-2.1.3.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven-ant-tasks.classpath" />
    <artifact:pom  id ="maven.project"  file ="pom.xml" />
    <artifact:dependencies filesetId="deps.fileset.compile" useScope="compile">
      <!--<pom file="pom.xml"/>-->
      <pom refid="maven.project"  />
    </artifact:dependencies>

    <artifact:dependencies filesetId="deps.fileset.test" scopes="test">
      <pom refid="maven.project"  />
    </artifact:dependencies>

    <artifact:dependencies filesetId="deps.fileset.provide" scopes="provide">
      <pom refid="maven.project"  />
    </artifact:dependencies>
  </target>

  <target name="lib.init" depends="init_maven">
    <copy todir="${build.lib.dir}/compile">
      <fileset refid="deps.fileset.compile"/>
      <mapper type="flatten"/>
    </copy>
    <copy todir="${build.lib.dir}/test">
      <fileset refid="deps.fileset.test"/>
      <mapper type="flatten"/>
    </copy>
    <copy todir="${build.lib.dir}/provide">
      <fileset refid="deps.fileset.test"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="help">
    <loadfile property="readme" srcfile="README"/>
    <echo level="info">
      ${readme}
    </echo>
  </target>

  <property name="build.dir" location="build"/>
  <property name="data.dir" location="data"/>

  <path id="classpath">
    <fileset refid="deps.fileset.compile"/>
    <fileset refid="deps.fileset.test"/>
    <fileset refid="deps.fileset.test"/>
  </path>

  <path id="nutchclasspath">
    <fileset dir="lib/nutch"/>
  </path>

  <macrodef name="run-main">
    <attribute name="class"/>
    <attribute name="spawn" default="no"/>
    <element name="args" optional="yes"/>

    <sequential>
      <echo>Running @{class}...</echo>
      <java classname="@{class}" fork="true" spawn="@{spawn}">
        <sysproperty key="index.dir" file="${build.dir}/index"/>
        <args/>
        <classpath>
          <path refid="classpath"/>
          <pathelement location="${build.dir}/classes"/>
        </classpath>
      </java>
    </sequential>
  </macrodef>

  <macrodef name="run-nutch-main">
    <attribute name="class"/>
    <attribute name="spawn" default="no"/>
    <element name="args" optional="yes"/>

    <sequential>
      <echo>Running @{class}...</echo>
      <java classname="@{class}" fork="true" spawn="@{spawn}">
        <sysproperty key="index.dir" file="${build.dir}/index"/>
        <args/>
        <classpath>
          <path refid="nutchclasspath"/>
          <pathelement location="${build.dir}/classes"/>
          <pathelement location="conf"/> <!-- for Nutch -->
        </classpath>
      </java>
    </sequential>
  </macrodef>

  <macrodef name="info">
    <text name="text"/>
    <sequential>
      <echo level="info">@{text}</echo>
      <input addProperty="nopause" message="Press return to continue..."/>
    </sequential>
  </macrodef>

  <target name="clean" description="Remove temporary build artifacts">
    <delete dir="${build.dir}"/>
  </target>

  <target name="compile" description="Compile source code">
    <mkdir dir="${build.dir}/classes"/>
    <javac srcdir="src"
           destdir="${build.dir}/classes"
           classpathref="classpath"
           encoding="UTF8"
           debug="on"
           deprecation="on">
      <include name="**/*.java"/>
    </javac>

  </target>



  <target name="prepare" depends="lib.init,compile"/>


  <!--
     M e e t   L u c e n e
  -->
  <target name="Indexer" depends="prepare"
          description="Indexes a directory of .txt files">
    <info>
      Index *.txt files in a directory into a Lucene index.  Use the
      Searcher target to search this index.

      Indexer is covered in the "Meet Lucene" chapter.
    </info>

    <input message="Directory for new Lucene index:"
           addProperty="index.dir"
           defaultValue="src/main/resources/meetlucene/index"
    />

    <input message="Directory with .txt files to index:"
           addProperty="text.dir"
           defaultValue="src/main/resources/meetlucene/data"
    />

    <input message="Overwrite ${index.dir}?"
           validargs="y,n"
           addproperty="confirm.overwrite"
    />
    <condition property="abort">
      <equals arg1="n" arg2="${confirm.overwrite}"/>
    </condition>
    <fail if="abort">Aborted.</fail>

    <run-main class="org.wilson.lucene.lia.meetlucene.Indexer">
      <args>
        <arg file="${index.dir}"/>
        <arg file="${text.dir}"/>
      </args>
    </run-main>
  </target>

</project>
